# Realize esse exercÃ­cio utilizando TDD: implemente os testes e depois a funÃ§Ã£o ğŸ§ª
# FaÃ§a uma funÃ§Ã£o que valide um e-mail, lanÃ§ando uma exceÃ§Ã£o quando o valor for invÃ¡lido. EndereÃ§os de e-mail vÃ¡lidos devem seguir as seguintes regras:
# Devem seguir o formato nomeusuario@nomewebsite.extensao;
# O nome de usuÃ¡rio deve conter somente letras, dÃ­gitos, traÃ§os e underscores (_);
# O nome de usuÃ¡rio deve iniciar com uma letra;
# O nome do website deve conter somente letras e dÃ­gitos;
# O tamanho mÃ¡ximo da extensÃ£o Ã© de 3 caracteres.
# ğŸ¦œ As funÃ§Ãµes isalpha, isdigit e isnumeric podem ser utilizadas para verificar se uma letra ou palavra sÃ£o compostas de somente caracteres ou dÃ­gitos. Exemplo: "1".isalpha() -> False , "a".isalpha() -> True, "123".isnumeric() -> True.

def check_email(email: str):
    
  list1 = email.split('@')
  if len(list1) == 1:
    raise ValueError("Email invÃ¡lido")
        
      
  list2 = list1[1].split('.')
  if len(list2) == 1:
    raise ValueError("Email invÃ¡lido")

  username = list1[0]
  website = list2[0]
  extension = list2[1]

  no_underscore = username.replace('_', 'U')
  no_dash = no_underscore.replace('-', 'D')
  if not no_dash.isalnum():
    raise ValueError("Email invÃ¡lido")
  
  if not username[0].isalpha():
    raise ValueError("Email invÃ¡lido")
  
  if not website.isalnum():
    raise ValueError("Email invÃ¡lido")
  
  if len(extension) > 3:
    raise ValueError("Email invÃ¡lido")
  
  print("Email VÃ¡lido")
  return True


user_input = input("Digite um email: ")
check_email(user_input)
